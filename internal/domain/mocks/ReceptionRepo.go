// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "pvz/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ReceptionRepo is an autogenerated mock type for the ReceptionRepo type
type ReceptionRepo struct {
	mock.Mock
}

// CloseReception provides a mock function with given fields: reception
func (_m *ReceptionRepo) CloseReception(reception *model.Reception) error {
	ret := _m.Called(reception)

	if len(ret) == 0 {
		panic("no return value specified for CloseReception")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Reception) error); ok {
		r0 = rf(reception)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReception provides a mock function with given fields: reception
func (_m *ReceptionRepo) CreateReception(reception *model.Reception) error {
	ret := _m.Called(reception)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Reception) error); ok {
		r0 = rf(reception)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLastOpenReceptionByPVZ provides a mock function with given fields: pvzID
func (_m *ReceptionRepo) FindLastOpenReceptionByPVZ(pvzID uuid.UUID) (*model.Reception, error) {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for FindLastOpenReceptionByPVZ")
	}

	var r0 *model.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Reception, error)); ok {
		return rf(pvzID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Reception); ok {
		r0 = rf(pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasOpenReception provides a mock function with given fields: pvzID
func (_m *ReceptionRepo) HasOpenReception(pvzID uuid.UUID) (bool, error) {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for HasOpenReception")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return rf(pvzID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(pvzID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceptionRepo creates a new instance of ReceptionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepo {
	mock := &ReceptionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
