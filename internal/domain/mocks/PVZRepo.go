// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "pvz/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PVZRepo is an autogenerated mock type for the PVZRepo type
type PVZRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: pvz
func (_m *PVZRepo) Create(pvz *model.PVZ) error {
	ret := _m.Called(pvz)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PVZ) error); ok {
		r0 = rf(pvz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredPVZs provides a mock function with given fields: start, end, page, limit
func (_m *PVZRepo) GetFilteredPVZs(start *time.Time, end *time.Time, page int, limit int) ([]model.PVZ, error) {
	ret := _m.Called(start, end, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteredPVZs")
	}

	var r0 []model.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(*time.Time, *time.Time, int, int) ([]model.PVZ, error)); ok {
		return rf(start, end, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*time.Time, *time.Time, int, int) []model.PVZ); ok {
		r0 = rf(start, end, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(*time.Time, *time.Time, int, int) error); ok {
		r1 = rf(start, end, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceptionsWithProducts provides a mock function with given fields: pvzID
func (_m *PVZRepo) GetReceptionsWithProducts(pvzID string) ([]model.ReceptionWithProducts, error) {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for GetReceptionsWithProducts")
	}

	var r0 []model.ReceptionWithProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.ReceptionWithProducts, error)); ok {
		return rf(pvzID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.ReceptionWithProducts); ok {
		r0 = rf(pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ReceptionWithProducts)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVZRepo creates a new instance of PVZRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZRepo {
	mock := &PVZRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
