// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "pvz/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Login provides a mock function with given fields: email, password
func (_m *UserService) Login(email string, password string) (model.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: email, password, role
func (_m *UserService) Register(email string, password string, role string) (model.User, error) {
	ret := _m.Called(email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (model.User, error)); ok {
		return rf(email, password, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) model.User); ok {
		r0 = rf(email, password, role)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
