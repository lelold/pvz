// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "pvz/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductRepo is an autogenerated mock type for the ProductRepo type
type ProductRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductRepo) Create(product *model.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductByID provides a mock function with given fields: productID
func (_m *ProductRepo) DeleteProductByID(productID uuid.UUID) error {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastAddedProduct provides a mock function with given fields: receptionID
func (_m *ProductRepo) GetLastAddedProduct(receptionID uuid.UUID) (*model.Product, error) {
	ret := _m.Called(receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastAddedProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Product, error)); ok {
		return rf(receptionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Product); ok {
		r0 = rf(receptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(receptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepo creates a new instance of ProductRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepo {
	mock := &ProductRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
