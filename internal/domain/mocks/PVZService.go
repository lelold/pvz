// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "pvz/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PVZService is an autogenerated mock type for the PVZService type
type PVZService struct {
	mock.Mock
}

// CreatePVZ provides a mock function with given fields: city
func (_m *PVZService) CreatePVZ(city string) (*model.PVZ, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 *model.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PVZ, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PVZ); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullPVZList provides a mock function with given fields: start, end, page, limit
func (_m *PVZService) GetFullPVZList(start *time.Time, end *time.Time, page int, limit int) ([]model.PVZFull, error) {
	ret := _m.Called(start, end, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetFullPVZList")
	}

	var r0 []model.PVZFull
	var r1 error
	if rf, ok := ret.Get(0).(func(*time.Time, *time.Time, int, int) ([]model.PVZFull, error)); ok {
		return rf(start, end, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*time.Time, *time.Time, int, int) []model.PVZFull); ok {
		r0 = rf(start, end, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PVZFull)
		}
	}

	if rf, ok := ret.Get(1).(func(*time.Time, *time.Time, int, int) error); ok {
		r1 = rf(start, end, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVZService creates a new instance of PVZService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZService {
	mock := &PVZService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
